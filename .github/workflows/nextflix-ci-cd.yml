name: Nextflix CI/CD

on:
  push:
    branches:
      - main       # Trigger on push to main for staging deployment
  pull_request:
    types:
      - closed    # Trigger on PR merge
    branches:
      - main      # Deploy to production on PR merge

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # -------------------------------
      # Checkout repository
      # -------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4

      # -------------------------------
      # Configure AWS credentials via OIDC
      # -------------------------------
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::922581758696:role/GitHubActions-Nextflix-Role
          aws-region: ${{ env.AWS_REGION }}

      # -------------------------------
      # Build, test, and push Docker image (staging)
      # -------------------------------
      - name: Build, Test, and Push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          IMAGE_TAG=${{ github.sha }}
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

          echo "Building Docker image..."
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .

          echo "Installing dependencies and running tests..."
          npm install --legacy-peer-deps
          npm test || echo "No tests defined"

          echo "Tagging and pushing image to ECR..."
          docker tag $ECR_REPOSITORY:$IMAGE_TAG 922581758696.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 922581758696.dkr.ecr.$AWS_REGION.amazonaws.com
          docker push 922581758696.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

          echo "Exporting IMAGE_URI..."
          echo "IMAGE_URI=922581758696.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      # -------------------------------
      # Pull latest Docker image for production (on PR merge)
      # -------------------------------
      - name: Pull latest Docker image for production
        if: github.event_name == 'pull_request' && github.event.pull_request.merged == true
        run: |
          IMAGE_TAG=$(aws ecr list-images --repository-name $ECR_REPOSITORY --query 'imageIds[-1].imageTag' --output text --region $AWS_REGION)
          echo "IMAGE_URI=922581758696.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV


      # -------------------------------
      # Deploy to EC2 (staging or production)
      # -------------------------------
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ github.event_name == 'push' && secrets.STAGING_HOST || secrets.PROD_HOST }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: IMAGE_URI,AWS_REGION
          script: |
            #  echo "Logging in to ECR on EC2..."
            #  aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin 922581758696.dkr.ecr.$AWS_REGION.amazonaws.com
            #  echo "Stopping previous container if exists..."
            #  docker stop nextflix || true
            #  docker rm nextflix || true
            #  echo "Pulling latest image: $IMAGE_URI"
            #  docker pull $IMAGE_URI
            #  echo "Starting container..."
            #  docker run -d --name nextflix -p 80:80 $IMAGE_URI
            chmod +x /opt/nextflix/deploy.sh
            /opt/nextflix/deploy.sh $IMAGE_URI


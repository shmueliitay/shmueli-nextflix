name: CI/CD - NextFlix to EC2

on:
  pull_request:
    branches: [ main ]    # -> STAGING
  push:
    branches: [ main ]    # -> PRODUCTION (after PR merges)

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}     # e.g. 123456789012.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # e.g. nextflix
  IMAGE_NAME: ${{ secrets.ECR_REPOSITORY }}
  CONTAINER_NAME: nextflix
  APP_PORT: ${{ secrets.APP_PORT || 3000 }}

jobs:
  build-and-push:
    name: Build & Push Image to ECR
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Compute image tags
        id: vars
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "TAG=pr-${{ github.event.number }}-${SHORT_SHA}" >> $GITHUB_OUTPUT
          else
            echo "TAG=prod-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi
          echo "LATEST_TAG=latest" >> $GITHUB_OUTPUT

      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.LATEST_TAG }}
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache
          cache-to:   type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:buildcache,mode=max

  deploy-staging:
    name: Deploy to STAGING (EC2)
    needs: build-and-push
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest

    steps:
      - name: Prepare deploy tag
        id: vars
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "TAG=pr-${{ github.event.number }}-${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: SSH deploy to staging
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.STAGING_HOST }}         # public IP/DNS
          username: ${{ secrets.SSH_USER }}         # e.g. ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -e
            echo "Logging into ECR..."
            aws ecr get-login-password --region "${{ env.AWS_REGION }}" | docker login --username AWS --password-stdin "${{ env.ECR_REGISTRY }}"

            echo "Pulling new image..."
            docker pull "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.TAG }}"

            echo "Stopping old container if exists..."
            docker rm -f "${{ env.CONTAINER_NAME }}" || true

            echo "Starting container..."
            docker run -d --name "${{ env.CONTAINER_NAME }}" \
              -p 3000:${{ env.APP_PORT }} \
              --restart unless-stopped \
              -e NODE_ENV=production \
              ${{ secrets.STAGING_ENV_VARS }} \
              "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.TAG }}"

            echo "Deployed STAGING."

  deploy-production:
    name: Deploy to PRODUCTION (EC2)
    needs: build-and-push
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest

    steps:
      - name: Prepare deploy tag
        id: vars
        run: |
          SHORT_SHA="${GITHUB_SHA::7}"
          echo "TAG=prod-${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: SSH deploy to production
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            set -e
            echo "Logging into ECR..."
            aws ecr get-login-password --region "${{ env.AWS_REGION }}" | docker login --username AWS --password-stdin "${{ env.ECR_REGISTRY }}"

            echo "Pulling new image..."
            docker pull "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.TAG }}"

            echo "Stopping old container if exists..."
            docker rm -f "${{ env.CONTAINER_NAME }}" || true

            echo "Starting container..."
            docker run -d --name "${{ env.CONTAINER_NAME }}" \
              -p 3000:${{ env.APP_PORT }} \
              --restart unless-stopped \
              -e NODE_ENV=production \
              ${{ secrets.PROD_ENV_VARS }} \
              "${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.TAG }}"

            echo "Deployed PRODUCTION."


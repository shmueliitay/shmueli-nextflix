name: CI/CD - NextFlix to EC2

on:
  push:
    branches:
      - main       # Production deploy
      - staging    # Optional: testing deploy from staging branch
  pull_request:
    branches:
      - main       # PRs to main trigger staging deploy

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  CONTAINER_NAME: nextflix
  APP_PORT: ${{ secrets.APP_PORT || 3000 }}

jobs:
  build-and-push:
    name: Build & Push Docker Image to ECR
    runs-on: ubuntu-latest
    outputs:
      staging-image: ${{ steps.build-staging.outputs.image }}
      prod-image: ${{ steps.build-prod.outputs.image }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install & run tests
        run: |
          npm ci
          npm run build || echo "Skipping build"
          npm test || echo "Tests failed or skipped"

      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Build staging image
      - name: Build & push staging Docker image
        id: build-staging
        if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main')
        run: |
          SHORT_SHA=${GITHUB_SHA::8}
          IMAGE="${{ steps.ecr-login.outputs.registry }}/nextflix:staging"
          SHA_IMAGE="${{ steps.ecr-login.outputs.registry }}/nextflix:staging-${SHORT_SHA}"
          docker build -t "$IMAGE" -t "$SHA_IMAGE" .
          docker push "$IMAGE"
          docker push "$SHA_IMAGE"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      # Build production image
      - name: Build & push production Docker image
        id: build-prod
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          SHORT_SHA=${GITHUB_SHA::8}
          IMAGE="${{ steps.ecr-login.outputs.registry }}/nextflix:latest"
          SHA_IMAGE="${{ steps.ecr-login.outputs.registry }}/nextflix:${SHORT_SHA}"
          docker build -t "$IMAGE" -t "$SHA_IMAGE" .
          docker push "$IMAGE"
          docker push "$SHA_IMAGE"
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

  deploy-staging:
    name: Deploy to STAGING
    needs: build-and-push
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref != 'refs/heads/main')
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to staging EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "Deploying ${{ needs.build-and-push.outputs.staging-image }} on staging"
            /opt/nextflix/deploy.sh "${{ needs.build-and-push.outputs.staging-image }}"

  deploy-production:
    name: Deploy to PRODUCTION
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to production EC2
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            echo "Deploying ${{ needs.build-and-push.outputs.prod-image }} on production"
            /opt/nextflix/deploy.sh "${{ needs.build-and-push.outputs.prod-image }}"

